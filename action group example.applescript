----	Created by: Sean Korzdorfer--	Created on: 04/15/13 08:06:40----	Script to create template based on calendar alarms-- NOTE: See automator_example to see the changed needed to for this to work in automatorproperty possibleFolder : ""property templateParentFolder : ""(*************** Edit Setup Information Here ***************)set theDate to current date-- Have the script create a new folderproperty folderName : "TEST"-- To make the above folder a subfolder, we need the existing folder IDproperty parentFolder : "Personal"-- Give the template project a new nameset projectName to "This is a test"-- Give the template project a noteset projectNote to "This project was created by a Calendar Alarm."(*************** End Edit Setup Information ***************)tell application "OmniFocus"	activate	tell front document		-- Is the value of folderName empty? If not, does a folder already exist with it's name?		set possibleFolder to my getPossibleFolder()		-- Is the value of pareneFolder empty? If not, does a folder already exist with it's name?		set templateParentFolder to get my getTemplateParentFolder()		-- Place Directory 		set templateFolder to my TestDirectory()		-- Create Project		tell templateFolder			set theTemplateProject to make new project with properties {name:projectName, note:projectNote} at end of projects of templateFolder		end tell				(*************** Edit Task Information Here ***************)				-- Task One		set taskName to "This will be the task name."		set startDate to theDate + 1 * weeks --NB: This creates a start date a week from today!		set dueDate to date "Saturday, May 25, 2013 12:00:00 AM"		set taskNote to "This will be note text"		set isFlagged to true -- Set to false for no flag		set theContext to first flattened context where its name = "Code"				-- Here I want to create an Action Group		tell theTemplateProject			set theGroupLeader to make new task with properties {name:"This is an action group", note:"Boom!"}		end tell		tell theGroupLeader to make new task with properties {name:taskName, start date:startDate, due date:dueDate, note:taskNote, context:theContext, flagged:isFlagged}				(*************** End Edit Task Information  ***************)			end tellend tellon getPossibleFolder()	tell application "OmniFocus"		tell front document			if folderName is not "" and (exists (first flattened folder where its name is folderName)) then				return first flattened folder where its name is folderName			else				return false			end if		end tell	end tellend getPossibleFolderon getTemplateParentFolder()	tell application "OmniFocus"		tell front document			if parentFolder is not "" and (exists (first flattened folder where its name is parentFolder)) then				return first flattened folder where its name is parentFolder			else				return false			end if		end tell	end tellend getTemplateParentFolderon TestDirectory()	tell application "OmniFocus"		tell front document			if possibleFolder is false and templateParentFolder is not false then				-- Test One - An OmniFocus Folder named foldername Does not Exist				return make new folder with properties {name:folderName} at end of templateParentFolder			else if templateParentFolder is false then				-- Test One - Does an OmniFocus Folder named parentFolder already exist?				set templateParentFolder to make new folder with properties {name:parentFolder}				return make new folder with properties {name:folderName} at end of templateParentFolder			else if possibleFolder is not false and templateParentFolder is not false then				-- Test 3: There are already folders for folderName and parentFolder				return my FolderPlacement()			end if		end tell	end tellend TestDirectoryon FolderPlacement()	tell application "OmniFocus"		tell front document			if container of possibleFolder is not templateParentFolder then				-- If there is already a folder named folderName whose parent is NOT parentFolder				-- Then: Make a new subfolder called folderName under parentFolder				return make new folder with properties {name:folderName} at end of templateParentFolder							else if container of possibleFolder is templateParentFolder then				-- If there is already a folder named folderName whose parent IS parentFolder				return possibleFolder			end if		end tell	end tellend FolderPlacement